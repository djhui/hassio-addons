{
  "arch": [
    "aarch64",
    "amd64"
  ],
  "codenotary": "alexandrep.github@gmail.com",
  "description": "以下是将上述英文文本翻译为中文的内容：\n\nPython脚本来更新电影、节目和收藏夹的元数据信息以及自动构建收藏夹。\n\n请注意，由于您没有提供具体的脚本代码或上下文，我无法直接给出一个完整的Python脚本示例来执行这些任务。不过，我可以提供一个基本的框架，您可以根据自己的需求进行扩展和完善。\n\n```python\nimport os\nfrom moviepy.editor import VideoFileClip\n\ndef update_metadata(video_path):\n    # 获取视频文件的元数据\n    clip = VideoFileClip(video_path)\n    metadata = clip.metadata\n    \n    # 更新元数据信息（例如标题、导演等）\n    metadata['title'] = '新的标题'\n    metadata['director'] = '新的导演'\n    \n    # 保存更新的元数据到文件\n    with open(video_path + '.metadata', 'w') as f:\n        f.write(str(metadata))\n        \ndef build_collection(collection_name, video_paths):\n    # 创建一个新的收藏夹文件夹\n    collection_folder = os.path.join('collections', collection_name)\n    if not os.path.exists(collection_folder):\n        os.makedirs(collection_folder)\n    \n    # 将指定的视频文件移动到收藏夹中\n    for path in video_paths:\n        new_path = os.path.join(collection_folder, os.path.basename(path))\n        os.rename(path, new_path)\n\n# 示例用法\nvideo_path = '/path/to/your/video.mp4'\nupdate_metadata(video_path)\ncollection_name = '我的收藏夹'\nvideo_paths = ['/path/to/other/video1.mp4', '/path/to/another/video2.mp4']\nbuild_collection(collection_name, video_paths)\n```\n\n这个脚本只是一个简单的例子，实际应用时可能需要根据具体的需求进行调整和优化。例如，你可能需要处理多种格式的视频文件，或者从不同的来源获取元数据信息。此外，对于自动构建收藏夹的功能，你可能还需要考虑如何选择和组织视频文件，以确保收藏夹的结构和内容符合预期。",
  "devices": [
    "/dev/dri",
    "/dev/dri/card0",
    "/dev/dri/card1",
    "/dev/dri/renderD128",
    "/dev/vchiq",
    "/dev/video10",
    "/dev/video11",
    "/dev/video12",
    "/dev/video13",
    "/dev/video14",
    "/dev/video15",
    "/dev/video16",
    "/dev/ttyUSB0",
    "/dev/sda",
    "/dev/sdb",
    "/dev/sdc",
    "/dev/sdd",
    "/dev/sde",
    "/dev/sdf",
    "/dev/sdg",
    "/dev/nvme",
    "/dev/nvme0",
    "/dev/nvme0n1",
    "/dev/nvme0n1p1",
    "/dev/nvme0n1p2",
    "/dev/nvme0n1p3",
    "/dev/nvme1n1",
    "/dev/nvme1n1p1",
    "/dev/nvme1n1p2",
    "/dev/nvme1n1p3",
    "/dev/nvme2n1",
    "/dev/nvme2n1p1",
    "/dev/nvme2n1p2",
    "/dev/nvme2n3p3",
    "/dev/mmcblk",
    "/dev/fuse",
    "/dev/sda1",
    "/dev/sdb1",
    "/dev/sdc1",
    "/dev/sdd1",
    "/dev/sde1",
    "/dev/sdf1",
    "/dev/sdg1",
    "/dev/sda2",
    "/dev/sdb2",
    "/dev/sdc2",
    "/dev/sdd2",
    "/dev/sde2",
    "/dev/sdf2",
    "/dev/sdg2",
    "/dev/sda3",
    "/dev/sdb3",
    "/dev/sda4",
    "/dev/sdb4",
    "/dev/sda5",
    "/dev/sda6",
    "/dev/sda7",
    "/dev/sda8",
    "/dev/nvme0",
    "/dev/nvme1",
    "/dev/nvme2"
  ],
  "image": "ghcr.nju.edu.cn/alexbelgium/kometa-{arch}",
  "init": false,
  "map": [
    "config:rw",
    "share:rw",
    "media:rw"
  ],
  "name": "Kometa",
  "options": {
    "KOMETA_CONFIG": "/config/addons_config/kometa/config.yml",
    "PGID": 0,
    "PUID": 0
  },
  "privileged": [
    "SYS_ADMIN",
    "DAC_READ_SEARCH"
  ],
  "schema": {
    "KOMETA_CONFIG": "str",
    "KOMETA_NO_MISSING": "bool?",
    "KOMETA_RUN": "bool?",
    "KOMETA_TEST": "bool?",
    "KOMETA_TIME": "str?",
    "PGID": "int",
    "PUID": "int",
    "TZ": "str?"
  },
  "slug": "kometa",
  "udev": true,
  "url": "https://gh-proxy.com/github.com/alexbelgium/hassio-addons/tree/master/kometa",
  "version": "2.1.0"
}
