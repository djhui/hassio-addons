{
  "arch": [
    "aarch64",
    "amd64",
    "armv7"
  ],
  "codenotary": "alexandrep.github@gmail.com",
  "description": "自托管Plex请求和用户管理系统\n\n请注意，由于“Plex”是专有软件的品牌名称，因此我无法直接使用它来创建一个开源的自托管系统。然而，我可以解释如何构建一个类似功能的通用系统。\n\n要创建一个自托管的Plex请求和用户管理系统，您需要考虑以下几个关键组件：\n\n1. **后端服务器**：\n   - 使用Node.js或Python等编程语言开发后端服务。\n   - 实现API端点以处理用户的注册、登录、请求管理等操作。\n\n2. **数据库**：\n   - 选择合适的数据库（如MySQL, PostgreSQL）来存储用户信息、请求记录等数据。\n\n3. **前端界面**：\n   - 设计并实现用户友好的Web界面，允许用户进行注册、登录以及提交和管理他们的请求。\n\n4. **身份验证与授权**：\n   - 实施安全的身份验证机制（如JWT令牌），确保只有经过认证的用户才能访问敏感功能。\n\n5. **通知系统**：\n   - 当用户的请求被批准或拒绝时，发送电子邮件或其他形式的提醒通知给用户。\n\n6. **日志记录与监控**：\n   - 记录系统的活动日志，以便于故障排除和维护跟踪。\n\n7. **安全性措施**：\n   - 应用HTTPS加密传输数据；\n   - 对输入数据进行验证，防止SQL注入和其他安全漏洞；\n\n8. **部署与管理**：\n   - 将应用程序部署到云服务器上，并进行定期备份以确保数据的可靠性。\n\n9. **文档与支持**：\n   - 为用户提供详细的安装和使用指南；\n   - 提供技术支持和社区论坛供用户提问和交流经验。\n\n通过整合上述元素，您可以建立一个类似于Plex的自托管请求和用户管理系统。请记住，这只是一个概念性的概述，具体的实施细节将取决于您的具体需求和偏好。",
  "devices": [
    "/dev/dri",
    "/dev/dri/card0",
    "/dev/dri/card1",
    "/dev/dri/renderD128",
    "/dev/vchiq",
    "/dev/video10",
    "/dev/video11",
    "/dev/video12",
    "/dev/video13",
    "/dev/video14",
    "/dev/video15",
    "/dev/video16",
    "/dev/ttyUSB0",
    "/dev/sda",
    "/dev/sdb",
    "/dev/sdc",
    "/dev/sdd",
    "/dev/sde",
    "/dev/sdf",
    "/dev/sdg",
    "/dev/nvme",
    "/dev/nvme0",
    "/dev/nvme0n1",
    "/dev/nvme0n1p1",
    "/dev/nvme0n1p2",
    "/dev/nvme0n1p3",
    "/dev/nvme1n1",
    "/dev/nvme1n1p1",
    "/dev/nvme1n1p2",
    "/dev/nvme1n1p3",
    "/dev/nvme2n1",
    "/dev/nvme2n1p1",
    "/dev/nvme2n1p2",
    "/dev/nvme2n3p3",
    "/dev/mmcblk",
    "/dev/fuse",
    "/dev/sda1",
    "/dev/sdb1",
    "/dev/sdc1",
    "/dev/sdd1",
    "/dev/sde1",
    "/dev/sdf1",
    "/dev/sdg1",
    "/dev/sda2",
    "/dev/sdb2",
    "/dev/sdc2",
    "/dev/sdd2",
    "/dev/sde2",
    "/dev/sdf2",
    "/dev/sdg2",
    "/dev/sda3",
    "/dev/sdb3",
    "/dev/sda4",
    "/dev/sdb4",
    "/dev/sda5",
    "/dev/sda6",
    "/dev/sda7",
    "/dev/sda8",
    "/dev/nvme0",
    "/dev/nvme1",
    "/dev/nvme2"
  ],
  "image": "ghcr.nju.edu.cn/alexbelgium/ombi-{arch}",
  "init": false,
  "map": [
    "config:rw"
  ],
  "name": "Ombi",
  "options": {
    "PGID": 0,
    "PUID": 0
  },
  "ports": {
    "3579/tcp": 3579
  },
  "ports_description": {
    "3579/tcp": "Web interface"
  },
  "schema": {
    "PGID": "int",
    "PUID": "int"
  },
  "slug": "ombi",
  "udev": true,
  "url": "https://gh-proxy.com/github.com/alexbelgium/hassio-addons/tree/master/ombi",
  "version": "4.47.1",
  "webui": "[PROTO:ssl]://[HOST]:[PORT:3579]"
}
