name: Extract and Download Docker Image

on: [push]

jobs:
  extract-and-download-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Traverse all directories
      id: traverse_directories
      run: |
        # 初始化 docker_image 为空
        docker_image=""

        # 遍历所有子目录（排除隐藏目录）
        for dir in $(find . -type d ! -path '*/\.*'); do
          echo "Found directory: $dir"
          
          # 检查是否已有 Docker image，若有则跳过
          if [ -z "$docker_image" ]; then
            # 检查 build.json
            if [ -f "$dir/build.json" ]; then
              echo "Found build.json in $dir"
              docker_image=$(jq -r '.docker_image // empty' "$dir/build.json")
              if [ -n "$docker_image" ]; then
                echo "docker_image found in build.json: $docker_image"
                echo "DOCKER_IMAGE=$docker_image" >> $GITHUB_ENV
                break  # 找到 Docker image 后停止遍历
              fi
            fi

            # 检查 build.yaml
            if [ -z "$docker_image" ] && [ -f "$dir/build.yaml" ]; then
              echo "Found build.yaml in $dir"
              docker_image=$(yq eval ".build_from.${ARCH} // \"\"" "$dir/build.yaml")
              if [ -n "$docker_image" ]; then
                echo "docker_image found in build.yaml: $docker_image"
                echo "DOCKER_IMAGE=$docker_image" >> $GITHUB_ENV
                break  # 找到 Docker image 后停止遍历
              fi
            fi

            # 检查 Dockerfile
            if [ -z "$docker_image" ] && [ -f "$dir/Dockerfile" ]; then
              echo "Found Dockerfile in $dir"
              docker_image=$(grep -oP '(?<=^FROM\s)[^ ]+' "$dir/Dockerfile")
              if [ -n "$docker_image" ]; then
                echo "docker_image found in Dockerfile: $docker_image"
                echo "DOCKER_IMAGE=$docker_image" >> $GITHUB_ENV
                break  # 找到 Docker image 后停止遍历
              fi
            fi
          fi
        done

    - name: Download Docker Image
      run: |
        if [ -n "$DOCKER_IMAGE" ]; then
          echo "Downloading Docker image: $DOCKER_IMAGE"
          docker pull "$DOCKER_IMAGE"
          docker save "$DOCKER_IMAGE" -o image.tar
        else
          echo "No Docker image found."
        fi

    - name: Commit Docker Image to Repository
      run: |
        if [ -f image.tar ]; then
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add image.tar
          git commit -m "Add downloaded Docker image with exact tag"
          git push
        fi
