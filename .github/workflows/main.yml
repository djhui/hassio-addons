name: Sync Home Assistant Addons

on:
  schedule:
    - cron: '0 18 */3 * *'  # 每 3 天的北京时间 02:00（UTC 18:00）运行
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4


      - name: Install jq
        run: sudo apt-get install jq -y

      - name: downloading addons
        run: |
          wget -q -O official.zip https://github.com/home-assistant/addons/archive/refs/heads/master.zip &
          wget -q -O community.zip https://github.com/hassio-addons/repository/archive/refs/heads/master.zip &
          wget -q -O alexbelgium.zip https://github.com/alexbelgium/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O Poeschl.zip https://github.com/Poeschl-HomeAssistant-Addons/repository/archive/refs/heads/main.zip &
          wget -q -O erik73.zip https://github.com/erik73/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O einschmidt.zip https://github.com/einschmidt/hassio-addons/archive/refs/heads/main.zip &
          wget -q -O FaserF.zip https://github.com/FaserF/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O jdeath.zip https://github.com/jdeath/homeassistant-addons/archive/refs/heads/main.zip &
          wget -q -O hacs.zip https://github.com/hacs/addons/archive/refs/heads/main.zip &
          wget -q -O bluemaes.zip https://github.com/bluemaex/home-assistant-addons/archive/refs/heads/main.zip &
          wget -q -O expaso.zip https://github.com/expaso/hassos-addons/archive/refs/heads/main.zip &
          wget -q -O blakeblackshear.zip https://github.com/blakeblackshear/frigate-hass-addons/archive/refs/heads/main.zip &
          wget -q -O music-assistant.zip https://github.com/music-assistant/home-assistant-addon/archive/refs/heads/main.zip &
          wget -q -O esphome.zip https://github.com/esphome/home-assistant-addon/archive/refs/heads/main.zip &
          wget -q -O litinoveweedle.zip https://github.com/litinoveweedle/hassio-addons/archive/refs/heads/main.zip &
          wget -q -O brenner-tobias.zip https://github.com/brenner-tobias/ha-addons/archive/refs/heads/main.zip &
          wget -q -O sanderdw.zip https://github.com/sanderdw/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O dianlight.zip https://github.com/dianlight/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O hydroqc.zip https://gitlab.com/hydroqc/hydroqc-hass-addons/-/archive/main/hydroqc-hass-addons-main.zip &
          wget -q -O hass-broadlink-ac-mqtt.zip https://github.com/Arbuzov/hass-broadlink-ac-mqtt/archive/refs/heads/master.zip &
          wget -q -O hugobloem.zip https://github.com/hugobloem/homeassistant-addons/archive/refs/heads/main.zip &
          wget -q -O haberda.zip https://github.com/haberda/hassio_addons/archive/refs/heads/master.zip &
          wget -q -O AlexxIT.zip https://github.com/AlexxIT/hassio-addons/archive/refs/heads/master.zip &
          wget -q -O da-anda.zip https://github.com/da-anda/hass-io-addons/archive/refs/heads/main.zip &
          wait
      - name: extract the addons
        run: |
          for file in *.zip; do
            unzip -o -q "$file" -d addons && rm "$file"
          done


      - name: Check and clean up addons
        run: |
            extract_version() {
              local file="$1"
              if jq -e . "$file" >/dev/null 2>&1; then
                jq -r '.version' "$file"
              else
                grep -E '^version:\s*' "$file" | awk -F': ' '{print $2}' | tr -d ' '
              fi
            }
        
            for addon_dir in ./addons/*/; do
              repo_name=$(basename "$addon_dir")
              for sub_dir in "$addon_dir"*/; do
                config_file=$(find "$sub_dir" -type f -name "config.json" -print -quit)
                
                if [[ -n "$config_file" ]]; then
                  main_config_path="./addons/$repo_name/$(basename "$sub_dir")/config.json"
        
                  if [[ -f "$main_config_path" ]]; then
                    addon_version=$(extract_version "$config_file")
                    main_version=$(extract_version "$main_config_path")
        
                    if [[ "$addon_version" != "$main_version" ]]; then
                      echo "Version mismatch in $repo_name ($(basename "$sub_dir")):"
                      echo "  Addon version: $addon_version"
                      echo "  Main version: $main_version"
                    else
                      echo "Version match in $repo_name ($(basename "$sub_dir")): $addon_version"
                      echo "Deleting $sub_dir"
                      rm -rf "$sub_dir"
                    fi
                  fi
                fi
              done
            done


      - name: modify the addons download link to accelerate url
        run: |
          find addons -type f \( -name "*.yaml" -o -name "*.json" -o -name "Dockerfile" \) -exec sed -i \
            -e 's|ghcr.io|ghcr.nju.edu.cn|g' \
            -e 's|image: homeassistant|image: docker.m.daocloud.io/homeassistant|g' \
            -e 's|docker.io|docker.m.daocloud.io|g' \
            -e 's|lscr.io|docker.m.daocloud.io|g' \
            -e 's|https://github.com|https://gh-proxy.com/github.com|g' \
            -e 's|ADD "https://raw.githubusercontent.com|ADD "https://gh-proxy.com/raw.githubusercontent.com|g' {} +

      - name: Translate markdown files
        run: |
              npm install -g ai-markdown-translator
              find ./addons -type f \( -name "README.md" -o -name "DOCS.md" \) -print0 | xargs -0 -P 5 -I {} sh -c '
                timeout 30s ai-markdown-translator -i "{}" -o "{}" -l "中文" || echo "{} translation failed or timed out."
              '
          

      - name: Replace description in config files
        run: |
              find ./addons -type f \( -name "config.yaml" -o -name "config.json" \) ! -path "*/.*/*" | while read -r file; do
                    {
                      if file -b --mime-type "$file" | grep -q "json"; then
                        description=$(jq -r '.description' "$file")
                        if [ "$description" == "null" ]; then
                          echo "No description found in $file (JSON), skipping..."
                          continue
                        fi
              
                        translated_description=$(curl -s --location 'https://open.bigmodel.cn/api/paas/v4/chat/completions' \
                          --header "Authorization: Bearer ${{ secrets.ZHIPUAI_KEY }}" \
                          --header 'Content-Type: application/json' \
                          --data "{
                            \"model\": \"glm-4v-flash\",
                            \"messages\": [
                              {
                                  \"role\": \"system\",
                                  \"content\": \"你是一个翻译程序，只将给你的内容翻译成中文，不需要任何其它多余解释以及回答，仅输出原文一致的翻译内容，每一次对话，你只输出一行内容\" 
                              },
                              {
                                \"role\": \"user\",
                                \"content\": \"翻译：$description\"
                              }
                            ]
                          }" | jq -r '.choices[0].message.content')
              
                        echo "Translated description for $file (JSON): $translated_description"
              
                        jq --arg description "$translated_description" '.description = $description' "$file" > temp.json && mv temp.json "$file"
                      
                      elif file -b --mime-type "$file" | grep -q "text"; then
                        description=$(awk '/^description:/ {found=1; sub(/^description:[ ]*[-|]*[ ]*/, ""); desc=$0; next} found && /^[^ ]/ {found=0} found {desc = desc " " $0} END {print desc}' "$file")
              
                        translated_description=$(curl -s --location 'https://open.bigmodel.cn/api/paas/v4/chat/completions' \
                          --header "Authorization: Bearer ${{ secrets.ZHIPUAI_KEY }}" \
                          --header 'Content-Type: application/json' \
                          --data "{
                            \"model\": \"glm-4v-flash\",
                            \"messages\": [
                              {
                                  \"role\": \"system\",
                                  \"content\": \"你是一个翻译程序，只将给你的内容翻译成中文，不需要任何其它多余解释以及回答，仅输出原文一致的翻译内容，每一次对话，你只输出一行内容\" 
                              },
                              {
                                \"role\": \"user\",
                                \"content\": \"翻译：$description\"
                              }
                            ]
                          }" | jq -r '.choices[0].message.content')
              
                        echo "Translated description for $file (non-JSON): $translated_description"
                        safe_description=$(printf "%q" "$translated_description")
                        sed -i "s|^description:.*|description: $safe_description|" "$file"
                      fi
                    } || {
                      echo "Error processing $file, skipping..."
                      continue
                    }
                  done
          
      - name: remove the hidden files
        run: |
                  find addons/ -name ".*" -exec rm -rf {} +
                  for ITEM in addons/*/*; do
                  BASENAME=$(basename "$ITEM") 
                  TARGET_PATH="./$BASENAME"
                    if [ -f "$ITEM" ]; then
                      rm -f "$ITEM"
                      echo "Deleted $ITEM" 
                    elif [ -d "$ITEM" ]; then
                      rm -rf "$TARGET_PATH"
                      mv -f "$ITEM" "./" || echo "Failed to move directory: $ITEM"
                      echo "Moved directory: $ITEM"
                    fi
                  done
                  rm -rf whisparr # 删除无用的仓库

      - name: sync hass-panel
        run: |
          mkdir -p hass-panel hass-panel-beta
          wget -q -O hass-panel.zip https://github.com/mrtian2016/hass-panel/archive/refs/heads/main.zip
          unzip -o hass-panel.zip -d hass-panel-temp && rm hass-panel.zip
          mv -f hass-panel-temp/hass-panel-main/hass-panel/* hass-panel/
          mv -f hass-panel-temp/hass-panel-main/hass-panel-beta/* hass-panel-beta/

          rm -rf hass-panel-temp

      - run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Sync addons" || echo "No changes to commit"
          git push
